<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Linq.Extras</name>
    </assembly>
    <members>
        <member name="T:Linq.Extras.XEnumerable">
            <summary>
            Provides extension and helper methods to work with sequences.
            </summary>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the specified element to the specified sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to append an element to.</param>
            <param name="item">The element to append.</param>
            <returns>The source sequence followed by the appended element.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the specified element to the specified sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to prepend an element to.</param>
            <param name="item">The element to prepend.</param>
            <returns>The source sequence preceded by the prepended element.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the input sequence into a sequence of batches of the specified size.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to split into batches.</param>
            <param name="size">The size of the batches</param>
            <returns>A sequence of batches of the specified size; the last batch can be shorter if there isn't enough elements remaining in the input sequence.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.CommonPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the common prefix of two sequences, according to the specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The first sequence.</param>
            <param name="other">The second sequence.</param>
            <param name="comparer">The comparer used to test items for equality (can be null).</param>
            <returns>A sequence consisting of the first elements of <c>source</c> that match the first elements of <c>other</c>.
            The resulting sequence ends when the two input sequence start to differ.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns a sequence with distinct elements from the input sequence based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used for testing equality between elements.</typeparam>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="keySelector">A delegate that returns the key used to test equality between elements.</param>
            <param name="keyComparer">A comparer used to test equality between keys (can be null).</param>
            <returns>A sequence whose elements have distinct values for the specified key.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a sequence with distinct adjacent elements from the input sequence based on the specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="comparer">A comparer used to test equality between elements (can be null).</param>
            <returns>A sequence that contains only distinct adjacent elements</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.DistinctUntilChangedBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns a sequence with distinct adjacent elements from the input sequence based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used for testing equality between elements.</typeparam>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="keySelector">A delegate that returns the key used to test equality between elements.</param>
            <param name="keyComparer">A comparer used to test equality between keys (can be null).</param>
            <returns>A sequence whose elements have distinct adjacent values for the specified key.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set difference of two sequences by using the specified key and key comparer to test for equality between elements.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key used for testing equality between elements.</typeparam>
            <param name="source">A sequence whose elements that are not also in second will be returned.</param>
            <param name="other">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A delegate that returns the key used to test equality between elements.</param>
            <param name="keyComparer">A comparer used to test equality between keys (can be null).</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Flatten``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Linq.Extras.TreeTraversalMode,System.Func{``0,System.Int32,``1})">
            <summary>
            Returns a flattened sequence from a graph or hierarchy of elements, using the specified children selector,
            and in the specified traversal order.
            </summary>
            <typeparam name="TNode">The type of the elements in the source hierarchy.</typeparam>
            <typeparam name="TResult">The type of the elements in the output sequence.</typeparam>
            <param name="source">The source hierarchy to flatten.</param>
            <param name="childrenSelector">The delegate used to retrieve the children of an element.</param>
            <param name="traversalMode">The traversal order.</param>
            <param name="resultSelector">The delegate used to project each node of the hierarchy to a result element. It accepts the node and its level as paramaters.</param>
            <returns>A flat sequence of elements produced from the elements in the source hierarchy.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Flatten``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Linq.Extras.TreeTraversalMode,System.Func{``0,``1})">
            <summary>
            Returns a flattened sequence from a graph or hierarchy of elements, using the specified children selector,
            and in the specified traversal order.
            </summary>
            <typeparam name="TNode">The type of the elements in the source hierarchy.</typeparam>
            <typeparam name="TResult">The type of the elements in the output sequence.</typeparam>
            <param name="source">The source hierarchy to flatten.</param>
            <param name="childrenSelector">The delegate used to retrieve the children of an element.</param>
            <param name="traversalMode">The traversal order.</param>
            <param name="resultSelector">The delegate used to project each node of the hierarchy to a result element. It accepts the node as a paramater.</param>
            <returns>A flat sequence of elements produced from the elements in the source hierarchy.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Linq.Extras.TreeTraversalMode)">
            <summary>
            Returns a flattened sequence from a graph or hierarchy of elements, using the specified children selector,
            and in the specified traversal order.
            </summary>
            <typeparam name="TNode">The type of the elements in the source hierarchy.</typeparam>
            <param name="source">The source hierarchy to flatten.</param>
            <param name="childrenSelector">The delegate used to retrieve the children of an element.</param>
            <param name="traversalMode">The traversal order.</param>
            <returns>A flat sequence of the elements in the source hierarchy.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Generate``1(``0,System.Func{``0,``0})">
            <summary>
            Generates a sequence from a seed and a generator function.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="seed">The first element of the sequence.</param>
            <param name="generator">A generator function that returns the next element from the current element.</param>
            <returns>An infinite sequence of generated elements.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Generate``1(System.Func{System.Int32,``0})">
            <summary>
            Generates a sequence from an index-based generator function.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="generator">A generator function that returns an element based on its index.</param>
            <returns>An sequence of elements generated from their index.</returns>
            <remarks>The index varies from 0 (inclusive) to <c>int.MaxValue</c> (exclusive), so the output sequence contains <c>int.MaxValue</c> elements.</remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.GroupUntilChanged``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups equal adjacent elements from the input sequence based on the specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence of elements to group.</param>
            <param name="comparer">A comparer used to test equality between elements (can be null).</param>
            <returns>A sequence of groupings of adjacent elements.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.GroupUntilChangedBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups adjacent elements from the input sequence that have the same value for the specified key, according to the specified key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used for testing equality between elements.</typeparam>
            <param name="source">The sequence of elements to group.</param>
            <param name="keySelector">A delegate that returns the key used to test equality between elements.</param>
            <param name="keyComparer">A comparer used to test equality between keys (can be null).</param>
            <returns>A sequence of groupings of adjacent elements that have the same value for the specified key.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the position of the first occurrence of <c>item</c> in the <c>source</c> sequence, or -1 if it is not found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to search for <c>item</c>.</param>
            <param name="item">The element to find the index of.</param>
            <param name="comparer">The comparer to use to test for equality between elements.</param>
            <returns>The zero-based index of the first occurrence of <c>item</c> if it is found; otherwise, -1.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the position of the first element of <c>source</c> that verifies the specified predicate, or -1 if it is not found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to search for a matching element.</param>
            <param name="predicate">The predicate that is tested against each element.</param>
            <returns>The zero-based index of the first element that verifies the predicate, or -1 if no element verifies the predicate.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the position of the last occurrence of <c>item</c> in the <c>source</c> sequence, or -1 if it is not found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to search for <c>item</c>.</param>
            <param name="item">The element to find the index of.</param>
            <param name="comparer">The comparer to use to test for equality between elements.</param>
            <returns>The zero-based index of the last occurrence of <c>item</c> if it is found; otherwise, -1.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the position of the last element of <c>source</c> that verifies the specified predicate, or -1 if it is not found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to search for a matching element.</param>
            <param name="predicate">The predicate that is tested against each element.</param>
            <returns>The zero-based index of the last element that verifies the predicate, or -1 if no element verifies the predicate.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.IndexOfSubstring``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the position of the first occurrence of the specified <c>substring</c> in the <c>source</c> sequence, or -1 if it is not found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to search for a substring.</param>
            <param name="substring">The substring to search.</param>
            <param name="comparer">The comparer to use to test equality between elements.</param>
            <returns>The zero-based index of the start of the first occurrence of <c>substring</c> if it's found; otherwise, -1.</returns>
            <remarks>Here the word <c>substring</c> is to be understood in the mathematical sense; it's not related to character strings. See the <see href="http://en.wikipedia.org/wiki/Substring">definition</see> on Wikipedia.</remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set intersection of two sequences, based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to test for equality between elements.</typeparam>
            <param name="source">The first sequence.</param>
            <param name="other">The second sequence.</param>
            <param name="keySelector">A delegate that returns the key used to test for equality between elements.</param>
            <param name="keyComparer">A comparer used to test for equality between keys.</param>
            <returns>The set intersection of <c>source</c> and <c>other</c>, based on the specified key and key comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether a sequence is null or empty.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to check.</param>
            <returns>true if the source sequence is null or empty; otherwise, false.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Indicates whether a sequence is null or empty.
            </summary>
            <param name="source">The sequence to check.</param>
            <returns>true if the source sequence is null or empty; otherwise, false.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the maximum element of the sequence according to the specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return the maximum element from.</param>
            <param name="comparer">The comparer used to compare elements.</param>
            <returns>The maximum element according to the specified comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum element of the sequence according to the specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return the minimum element from.</param>
            <param name="comparer">The comparer used to compare elements.</param>
            <returns>The minimum element according to the specified comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the element of the sequence that has the maximum value for the specified key.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to compare elements.</typeparam>
            <param name="source">The sequence to return an element from.</param>
            <param name="keySelector">A delegate that returns the key used to compare elements.</param>
            <param name="keyComparer">A comparer to compare the keys.</param>
            <returns>The element of <c>source</c> that has the maximum value for the specified key.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the element of the sequence that has the minimum value for the specified key.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to compare elements.</typeparam>
            <param name="source">The sequence to return an element from.</param>
            <param name="keySelector">A delegate that returns the key used to compare elements.</param>
            <param name="keyComparer">A comparer to compare the keys.</param>
            <returns>The element of <c>source</c> that has the minimum value for the specified key.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to check for emptyness.</param>
            <returns>true if the sequence is empty, false if it contains at least one element.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Checks if the sequence contains no element that matches the predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to check.</param>
            <param name="predicate">The predicate to verify against each element in the sequence.</param>
            <returns>true if no element matches the predicate, false if at least one element matches the predicate.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the first element of a sequence or the specified default value if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return the first element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><c>defaultValue</c> if <c>source</c> is empty; otherwise, the first element in <c>source</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the first element of the sequence that satisfies a condition or the specied default value if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if no matching element is found.</param>
            <returns><c>defaultValue</c> if source is empty or if no element passes the test specified by <c>predicate</c>; otherwise, the first element in <c>source</c> that passes the test specified by <c>predicate</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the last element of a sequence or the specified default value if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return the last element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><c>defaultValue</c> if <c>source</c> is empty; otherwise, the last element in <c>source</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the last element of the sequence that satisfies a condition or the specied default value if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if no matching element is found.</param>
            <returns><c>defaultValue</c> if source is empty or if no element passes the test specified by <c>predicate</c>; otherwise, the last element in <c>source</c> that passes the test specified by <c>predicate</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Returns the element at a specified index in a sequence, or the specified default value if the index is out of range.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="defaultValue">The default value to return if there is no element at the specified index.</param>
            <returns><c>defaultValue</c> if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the only element of a sequence, or the specified default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return the single element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns>The single element of the input sequence, or <c>defaultValue</c> if the sequence contains no elements.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, or the specified default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value to return if the no element matches the predicate.</param>
            <returns>The single element of the input sequence that satisfies the condition, or <c>defaultValue</c> if no such element is found.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.LeftOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Produces the left outer join of two sequences.
            </summary>
            <typeparam name="TLeft">The type of the elements of <c>left</c>.</typeparam>
            <typeparam name="TRight">The type of the elements of <c>right</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to join elements.</typeparam>
            <typeparam name="TResult">The type of the elements of the output sequence</typeparam>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <param name="leftKeySelector">The key selector for elements of the left sequence.</param>
            <param name="rightKeySelector">The key selector for elements of the right sequence.</param>
            <param name="resultSelector">A function to produce an output element from two matching elements from the left and right sequences.</param>
            <param name="defaultRight">The default value to use for missing elements in <c>right</c>.</param>
            <param name="keyComparer">A comparer to test for equality between the keys.</param>
            <returns>The left outer join of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.RightOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``0,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Produces the right outer join of two sequences.
            </summary>
            <typeparam name="TLeft">The type of the elements of <c>left</c>.</typeparam>
            <typeparam name="TRight">The type of the elements of <c>right</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to join elements.</typeparam>
            <typeparam name="TResult">The type of the elements of the output sequence</typeparam>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <param name="leftKeySelector">The key selector for elements of the left sequence.</param>
            <param name="rightKeySelector">The key selector for elements of the right sequence.</param>
            <param name="resultSelector">A function to produce an output element from two matching elements from the left and right sequences.</param>
            <param name="defaultLeft">The default value to use for missing elements in <c>left</c>.</param>
            <param name="keyComparer">A comparer to test for equality between the keys.</param>
            <returns>The right outer join of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,``0,``1,``3},``0,``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Produces the full outer join of two sequences.
            </summary>
            <typeparam name="TLeft">The type of the elements of <c>left</c>.</typeparam>
            <typeparam name="TRight">The type of the elements of <c>right</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to join elements.</typeparam>
            <typeparam name="TResult">The type of the elements of the output sequence</typeparam>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <param name="leftKeySelector">The key selector for elements of the left sequence.</param>
            <param name="rightKeySelector">The key selector for elements of the right sequence.</param>
            <param name="resultSelector">A function to produce an output element from two matching elements from the left and right sequences.</param>
            <param name="defaultLeft">The default value to use for missing elements in <c>left</c>.</param>
            <param name="defaultRight">The default value to use for missing elements in <c>right</c>.</param>
            <param name="keyComparer">A comparer to test for equality between the keys.</param>
            <returns>The full outer join of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.RankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Associates an ascending rank to each element of the input sequence, based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to compare elements.</typeparam>
            <typeparam name="TResult">The type of the elements in the output sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="keySelector">A function that returns the key for each element.</param>
            <param name="resultSelector">A projection that takes an element and its rank and returns an output element.</param>
            <param name="keyComparer">The comparer used to compare the keys.</param>
            <returns>A sequence of elements associated with their rank using the result selector.</returns>
            <remarks>
            This method produces a sparse ranking, i.e. elements with equal rank produce "holes" in the ranks. In the following example,
            there are two elements with rank 2, so there is no element with rank 3; the rank of the next element is 4.
            <list type="table">
                <listheader>
                    <term>Rank</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>1</term>
                    <description>A</description>
                </item>
                <item>
                    <term>2</term>
                    <description>B</description>
                </item>
                <item>
                    <term>2</term>
                    <description>B</description>
                </item>
                <item>
                    <term>4</term>
                    <description>C</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.RankByDescending``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Associates a descending rank to each element of the input sequence, based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to compare elements.</typeparam>
            <typeparam name="TResult">The type of the elements in the output sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="keySelector">A function that returns the key for each element.</param>
            <param name="resultSelector">A projection that takes an element and its rank and returns an output element.</param>
            <param name="keyComparer">The comparer used to compare the keys.</param>
            <returns>A sequence of elements associated with their rank using the result selector.</returns>
            <remarks>
            This method produces a sparse ranking, i.e. elements with equal rank produce "holes" in the ranks. See <see cref="M:Linq.Extras.XEnumerable.RankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2},System.Collections.Generic.IComparer{``1})"/> for an example.
            </remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.DenseRankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Associates an ascending dense rank to each element of the input sequence, based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to compare elements.</typeparam>
            <typeparam name="TResult">The type of the elements in the output sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="keySelector">A function that returns the key for each element.</param>
            <param name="resultSelector">A projection that takes an element and its rank and returns an output element.</param>
            <param name="keyComparer">The comparer used to compare the keys.</param>
            <returns>A sequence of elements associated with their rank using the result selector.</returns>
            <remarks>
            This method produces a dense ranking, i.e. elements with equal rank produce no "holes" in the ranks. In the following example,
            there are two elements with rank 2, and the rank of the next element is 3.
            <list type="table">
                <listheader>
                    <term>Dense rank</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>1</term>
                    <description>A</description>
                </item>
                <item>
                    <term>2</term>
                    <description>B</description>
                </item>
                <item>
                    <term>2</term>
                    <description>B</description>
                </item>
                <item>
                    <term>3</term>
                    <description>C</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.DenseRankByDescending``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Associates a descending dense rank to each element of the input sequence, based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to compare elements.</typeparam>
            <typeparam name="TResult">The type of the elements in the output sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="keySelector">A function that returns the key for each element.</param>
            <param name="resultSelector">A projection that takes an element and its rank and returns an output element.</param>
            <param name="keyComparer">The comparer used to compare the keys.</param>
            <returns>A sequence of elements associated with their rank using the result selector.</returns>
            <remarks>
            This method produces a dense ranking, i.e. elements with equal rank produce no "holes" in the ranks. See <see cref="M:Linq.Extras.XEnumerable.DenseRankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2},System.Collections.Generic.IComparer{``1})"/> for an example.
            </remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.SequenceEqualBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether two sequences are equal by comparing their elements using the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c> and <c>other</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to test for equality between elements.</typeparam>
            <param name="source">The first sequence to compare.</param>
            <param name="other">The second sequence to compare.</param>
            <param name="keySelector">A function that returns the key to use to test for equality between elements.</param>
            <param name="keyComparer">A comparer used to compare the keys.</param>
            <returns>true if the two source sequences are of equal length and their corresponding elements compare equal according to the key and key comparer; otherwise, false.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a queue from the elements in the source sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence containing the elements to put in the queue.</param>
            <returns>A queue containing the same elements as the <c>source</c> sequence.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a stack from the elements in the source sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence containing the elements to put in the stack.</param>
            <returns>A stack containing the same elements as the <c>source</c> sequence.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a hash set from the elements in the source sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence containing the elements to put in the hash set.</param>
            <param name="comparer">A comparer to test for equality between elements.</param>
            <returns>A hash set containing the same elements as the <c>source</c> sequence.</returns>
            <remarks>Since a hash set cannot contain duplicates, duplicate elements from the <c>source</c> sequence will not be included in the hash set.</remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a linked list from the elements in the source sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence containing the elements to put in the linked list.</param>
            <returns>A linked list containing the same elements as the <c>source</c> sequence.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates an array from the elements in the source sequence. Unlike <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>,
            this method takes the number of elements as a parameter, so that it can allocate an array of the right size
            from the start, hence suppressing the need for subsequent allocations and improving performance.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence containing the elements to put in the array.</param>
            <param name="count">The number of elements in <c>source</c>.</param>
            <returns>An array containing the same elements as the <c>source</c> sequence.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The <c>source</c> sequence contains more than <c>count</c> elements.</exception>
            <remarks><see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/> doesn't know the number of elements in the source sequence (unless it
            implements <see cref="T:System.Collections.Generic.ICollection`1"/>), so it starts by allocating a small array, copies elements into it until it's full,
            then allocates a new array with twice the initial size, copies the data from the previous array, and continues until all
            elements have been copied; then it needs to trim the array, by allocating yet another array with the correct size and copying
            the data into it. This is very inefficient because of the many allocations and copies. This method allows you to supply the
            number of elements, if you know it, so that it can make a single array allocation of exactly the right size.</remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from the elements in the source sequence. Unlike <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/>,
            this method takes the number of elements as a parameter, so that it can allocate a list with sufficient capacity, hence suppressing
            the need for subsequent allocations, and improving performance.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The sequence containing the elements to put in the list.</param>
            <param name="count">The number of elements in <c>source</c>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the same elements as the <c>source</c> sequence.</returns>
            <remarks><see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> doesn't know the number of elements in the source sequence (unless it
            implements <see cref="T:System.Collections.Generic.ICollection`1"/>), so it starts with an empty collection and adds the items to it; every time the list's
            capacity is exceeded, it needs to resize itself, which involves allocating a new array and copying the existing data into it
            (all of this is actually done in the <see cref="T:System.Collections.Generic.List`1"/> class). This is very inefficient, because of the many allocations
            and copies. This method allows you to supply the number of elements, if you know it, so that it can allocate a list with sufficient
            capacity and avoid subsequent allocations.</remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.ToHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},``1)">
            <summary>
            Builds a hierarchy from a flat sequence of elements, based on an Id/ParentId relation.
            </summary>
            <typeparam name="TSource">The type of the elements in <c>source</c>.</typeparam>
            <typeparam name="TId">The type of the elements' identifier.</typeparam>
            <param name="source">The flat sequence of elements to build a hierarchy from.</param>
            <param name="idSelector">A function that returns the id of an element.</param>
            <param name="parentIdSelector">A function that returns the parent id of an element.</param>
            <param name="rootParentId">The parent id of the root elements (0 or -1, for instance).</param>
            <returns>A sequence containing the root nodes of the hierarchy. Each node in the hierarchy has a collection of child nodes and a link to the parent node.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set union of two sequences, based on the specified key and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <typeparam name="TKey">The type of the key used to test for equality between elements.</typeparam>
            <param name="source">The first sequence.</param>
            <param name="other">The second sequence.</param>
            <param name="keySelector">A delegate that returns the key used to test for equality between elements.</param>
            <param name="keyComparer">A comparer used to test for equality between keys.</param>
            <returns>The set union of <c>source</c> and <c>other</c>, based on the specified key and key comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Associates an index to each element of the source sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <c>source</c>.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence of elements paired with their index in the sequence.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.WithoutIndex``1(System.Collections.Generic.IEnumerable{Linq.Extras.IIndexedItem{``0}})">
            <summary>
            Removes the indexes from a sequence of indexed elements, returning only the elements themselves.
            </summary>
            <typeparam name="TSource">The type of the indexed elements.</typeparam>
            <param name="source">The sequence to remove the indexes from.</param>
            <returns>A sequence of elements without their associated indexes.</returns>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Unit``1(``0)">
            <summary>
            Produces a sequence containing a single element.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="item">The element to include in the sequence.</param>
            <returns>A sequence containing the specified element.</returns>
            <remarks>The output sequence is lazily evaluated.</remarks>
        </member>
        <member name="M:Linq.Extras.XEnumerable.Empty``1">
            <summary>
            Produces an empty sequence.
            </summary>
            <typeparam name="TSource">The element typeof the sequence.</typeparam>
            <returns>An empty sequence.</returns>
            <remarks>
            Unlike <see cref="M:System.Linq.Enumerable.Empty``1"/>, this method returns a lazily evaluated sequence; <see cref="M:System.Linq.Enumerable.Empty``1"/> returns an empty array.</remarks>
        </member>
        <member name="T:Linq.Extras.IIndexedItem`1">
            <summary>
            Represents an element associated with its index in a sequence.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="P:Linq.Extras.IIndexedItem`1.Index">
            <summary>
            The index of the element in a sequence.
            </summary>
        </member>
        <member name="P:Linq.Extras.IIndexedItem`1.Item">
            <summary>
            The value of the element.
            </summary>
        </member>
        <member name="T:Linq.Extras.Infer">
            <summary>
            Provides helper methods to create functions and expression trees from lambda expressions, by taking advantage of generic type inference.
            </summary>
        </member>
        <member name="M:Linq.Extras.Infer.Func``1(System.Func{``0})">
            <summary>
            Returns a <c>Func&lt;TResult&gt;</c>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">A lambda expression representing the function to return.</param>
            <returns>The function passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Expr``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns an <c>Expression&lt;Func&lt;TResult&gt;&gt;</c>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expr">A lambda expression representing the function whose expression tree will be returned.</param>
            <returns>The expression passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Func``2(System.Func{``0,``1})">
            <summary>
            Returns a <c>Func&lt;T1, TResult&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">A lambda expression representing the function to return.</param>
            <returns>The function passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Expr``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns an <c>Expression&lt;Func&lt;T1, TResult&gt;&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expr">A lambda expression representing the function whose expression tree will be returned.</param>
            <returns>The expression passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Func``3(System.Func{``0,``1,``2})">
            <summary>
            Returns a <c>Func&lt;T1, T2, TResult&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">A lambda expression representing the function to return.</param>
            <returns>The function passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Expr``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Returns an <c>Expression&lt;Func&lt;T1, T2, TResult&gt;&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expr">A lambda expression representing the function whose expression tree will be returned.</param>
            <returns>The expression passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Func``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a <c>Func&lt;T1, T2, T3, TResult&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">A lambda expression representing the function to return.</param>
            <returns>The function passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Expr``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Returns an <c>Expression&lt;Func&lt;T1, T2, T3, TResult&gt;&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expr">A lambda expression representing the function whose expression tree will be returned.</param>
            <returns>The expression passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Func``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a <c>Func&lt;T1, T2, T3, T4, TResult&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">A lambda expression representing the function to return.</param>
            <returns>The function passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="M:Linq.Extras.Infer.Expr``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Returns an <c>Expression&lt;Func&lt;T1, T2, T3, T4, TResult&gt;&gt;</c>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expr">A lambda expression representing the function whose expression tree will be returned.</param>
            <returns>The expression passed as parameter.</returns>
            <remarks>This method just returns its parameter. It's only a helper to take advantage of generic type inference.</remarks>
        </member>
        <member name="T:Linq.Extras.INode`1">
            <summary>
            Represents a node in a hierarchy.
            </summary>
            <typeparam name="T">The type of the elements in the hierarchy.</typeparam>
        </member>
        <member name="P:Linq.Extras.INode`1.Item">
            <summary>
            The value of the element contained in this node.
            </summary>
        </member>
        <member name="P:Linq.Extras.INode`1.Children">
            <summary>
            The child nodes of this node.
            </summary>
        </member>
        <member name="P:Linq.Extras.INode`1.Level">
            <summary>
             The depth of this node in the hierarchy (root nodes have level 0).
            </summary>
        </member>
        <member name="P:Linq.Extras.INode`1.Parent">
            <summary>
            The parent node of this node.
            </summary>
        </member>
        <member name="T:Linq.Extras.TreeTraversalMode">
            <summary>
            Defines the possible traversal orders when traversing a hierarchy of objects.
            </summary>
        </member>
        <member name="F:Linq.Extras.TreeTraversalMode.DepthFirst">
            <summary>
            Depth-first traversal. For each node, explores its children before its siblings.
            </summary>
        </member>
        <member name="F:Linq.Extras.TreeTraversalMode.BreadthFirst">
            <summary>
            Breadth-first traversal. For each node, explores its siblings before its children.
            </summary>
        </member>
        <member name="T:Linq.Extras.XComparer">
            <summary>
            Provides extension and helper methods to create, combine and work with comparers.
            </summary>
        </member>
        <member name="M:Linq.Extras.XComparer.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a comparer that has the reverse logic of the original comparer.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="comparer">The original comparer.</param>
            <returns>A comparer with the reverse logic of the original one.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.ChainWith``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Chains two comparers. The resulting comparer will first compare items using <c>comparer</c>,
            and if it's not enough to decide which is greater, it will use <c>nextComparer</c> to decide.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="comparer">The primary comparer.</param>
            <param name="nextComparer">The secondary comparer.</param>
            <returns>A comparer that will use the primary comparer, then the secondary comparer if necessary.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.By``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Creates a comparer with ascending order based on the specified comparison key and key comparer.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to compare the keys.</param>
            <returns>A comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.ByDescending``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Creates a comparer with descending order based on the specified comparison key and key comparer.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to compare the keys.</param>
            <returns>A comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.ThenBy``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Chains a secondary comparer with ascending order based on the specified key to an existing comparer.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="comparer">The primary comparer.</param>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to compare the keys.</param>
            <returns>A comparer that will use the primary comparer, then the secondary comparer if necessary.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.ThenByDescending``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Chains a secondary comparer with descending order based on the specified key to an existing comparer.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="comparer">The primary comparer.</param>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to compare the keys.</param>
            <returns>A comparer that will use the primary comparer, then the secondary comparer if necessary.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.FromComparison``1(System.Comparison{``0})">
            <summary>
            Creates a comparer that uses the specified <see cref="T:System.Comparison`1"/> delegate to compare objects.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> delegate used to compare objects.</param>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <returns>A comparer that uses the specified <see cref="T:System.Comparison`1"/> delegate to compare objects.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.Min``1(System.Collections.Generic.IComparer{``0},``0,``0)">
            <summary>
            Returns the lesser of two items according to <c>comparer</c>.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="comparer">The comparer that performs the comparison.</param>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>x</c> if <c>x</c> is lesser than or equal to <c>y</c>; otherwise, <c>y</c>.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer.Max``1(System.Collections.Generic.IComparer{``0},``0,``0)">
            <summary>
            Returns the greater of two items according to <c>comparer</c>.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="comparer">The comparer that performs the comparison.</param>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>x</c> if <c>x</c> is greater than or equal to <c>y</c>; otherwise, <c>y</c>.</returns>
        </member>
        <member name="T:Linq.Extras.XComparer`1">
            <summary>
            Provides helper methods to create comparers by taking advantage of generic type inference
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:Linq.Extras.XComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a comparer with ascending order based on the specified comparison key and key comparer.
            </summary>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to compare the keys.</param>
            <returns>A comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer`1.ByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a comparer with descending order based on the specified comparison key and key comparer.
            </summary>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to compare the keys.</param>
            <returns>A comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="M:Linq.Extras.XComparer`1.FromComparison(System.Comparison{`0})">
            <summary>
            Creates a comparer that uses the specified <see cref="T:System.Comparison`1"/> delegate to compare objects.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> delegate used to compare objects.</param>
            <returns>A comparer that uses the specified <see cref="T:System.Comparison`1"/> delegate to compare objects.</returns>
        </member>
        <member name="T:Linq.Extras.XEqualityComparer">
            <summary>
            Provides extension and helper methods to create and work with equality comparers.
            </summary>
        </member>
        <member name="M:Linq.Extras.XEqualityComparer.By``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates an equality comparer based on the specified comparison key and key comparer.
            </summary>
            <typeparam name="T">The type of the objects to test for equality.</typeparam>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to test the keys for equality.</param>
            <returns>An equality comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="T:Linq.Extras.XEqualityComparer`1">
            <summary>
            Provides a helper method to create equality comparers by taking advantage of generic type inference
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:Linq.Extras.XEqualityComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates an equality comparer based on the specified comparison key and key comparer.
            </summary>
            <typeparam name="TKey">The type of the comparison key.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="keyComparer">An optional comparer used to test the keys for equality.</param>
            <returns>An equality comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="T:Linq.Extras.XList">
            <summary>
            Provides extension methods for working with lists.
            </summary>
        </member>
        <member name="M:Linq.Extras.XList.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the elements of a list using the specified <see cref="T:System.Random"/> instance.
            </summary>
            <typeparam name="T">The type of the elements in <c>list</c>.</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="random">A random number generator to use to shuffle the list. If null, a new random number generator will be used.</param>
        </member>
        <member name="M:Linq.Extras.XList.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the elements at the specified positions in the list.
            </summary>
            <typeparam name="T">The type of the elements in <c>list</c>.</typeparam>
            <param name="list">The list in which to swap elements.</param>
            <param name="index1">The index of the first element to swap.</param>
            <param name="index2">The index of the second element to swap.</param>
        </member>
        <member name="M:Linq.Extras.XList.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a read-only wrapper for the list.
            </summary>
            <typeparam name="T">The type of the elements in <c>list</c>.</typeparam>
            <param name="list">The list for which to return a read-only wrapper.</param>
            <returns>A read-only wrapper for <c>list</c>.</returns>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
    </members>
</doc>
